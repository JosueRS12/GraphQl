{"version":3,"sources":["../src/resolvers.js"],"names":["resolvers","Query","hello","greet","root","args","name","tasks","Mutation","createTask","_","input","_id","length","push"],"mappings":";;;;;;;AACA;;AADA;AAEO,IAAMA,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAG;AAAE;AACRC,IAAAA,KAAK,EAAE,iBAAM;AAAE;AACb,aAAO,6BAAP;AACD,KAHK;AAINC,IAAAA,KAAK,EAAE,eAACC,IAAD,EAAOC,IAAP,EAAc;AACnB,0BAAaA,IAAI,CAACC,IAAlB;AACD,KANK;AAONC,IAAAA,KAPM,mBAOE;AACN,aAAOA,aAAP;AACD;AATK,GADe;AAYvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UADQ,sBACGC,CADH,QACc;AAAA,UAAPC,KAAO,QAAPA,KAAO;AACpB;AACAA,MAAAA,KAAK,CAACC,GAAN,GAAYL,cAAMM,MAAlB,CAFoB,CAGpB;;AACAN,oBAAMO,IAAN,CAAWH,KAAX;;AACA,aAAOA,KAAP;AACD;AAPO;AAZa,CAAlB","sourcesContent":["// functions for to do queries.\nimport {tasks} from \"./sample\";\nexport const resolvers = {\n  Query : { //the type was defined in schema\n    hello: () => { //this functions does anything when is called\n      return 'Hello World Whit GraphQl xD';\n    }, \n    greet: (root, args)=>{\n      return `hi ${args.name}`;\n    },\n    tasks() {\n      return tasks;\n    }\n  },\n  Mutation: {\n    createTask(_, {input}){\n      //add a new atribute to input\n      input._id = tasks.length;\n      //add a new element in tasks\n      tasks.push(input);\n      return input;\n    }\n  }\n\n\n  \n};\n"],"file":"resolvers.js"}